Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2011-09-20T15:58:56+08:00

====== Git ======
Created 星期二 20 九月 2011

===== 0 使用技巧 =====
* 通过ssh协议克隆项目是，可用git clone ssh://user@server/project.git%EF%BC%8C%E6%88%96%E8%80%85git clone user@server:project.git，请注意里面的:和/符号，如下：
	git clone ssh://andrewzhao@127.0.0.1/host/CharByChar
	git clone andrewzhao@127.0.0.1:/host/CharByChar


===== 1 使用 Git 管理个人文档 =====
* 凡需要持续变动的文档皆可作为项目并交付于 Git 进行管理。
* Git 可以保存任何文档,但是最善于保存文本文档。
* Git 对于非文本文档, 只是简单地为其进行备份并实施版本管理。
* Git 不会主动记录你对文档进行的更新,除非你对它发号施令。


===== 2 .gitignore =====
有什么不需要关心(untrack)的，放到.gitignore文件里面就行；
在前面加上“！”表示不是不关心；

===== 3 howto =====
--- 来自youtube上Greg KH介绍Git的视频
* git clone git://xx.git 从git服务器上获取最新的tree，不过在执行clone后需要chechout到master上面，否则看不到source code
* git branch xxx，新建一个最新的branch
* git branch，显示现在所有的branch
* git checkout xxx，切换到xxx branch上来
* git diff，显示改变的内容
* make M=drivers/xxx/，单独编译一个模块，这个操作通常在修改内核源代码后进行
* git format-patch，形成patch，然后可以通过./scripts/*中的工具发送或提交给kernel tree
* [[/scripts/get_maintainer.pl可以获取每个源文件的maintainer信息]]
* git pull，能够获取master tree上的最新改动，并将改动合并到本地tree中

===== 4 Pro Git笔记 =====
--- 很给力的介绍Git的文档，http://progit.org/book/zh/

== 4.1 Git的配置 ==
* 通过git config工具完成配置，配置文件存放在三个地方：
    1. /etc/gitconfig 文件：系统中对所有用户都普遍适用的配置。若使用 git config 时用 --system 选项，读写的就是这个文件。
    2. ~/.gitconfig 文件：用户目录下的配置文件只适用于该用户。若使用 git config 时用 --global 选项，读写的就是这个文件。
    3. 当前项目的 git 目录中的配置文件（也就是工作目录中的 .git/config 文件）：这里的配置仅仅针对当前项目有效。每一个级别的配置都会覆盖上层的相同配置，所以 .git/config 里的配置会覆盖 /etc/gitconfig 中的同名变量。
* 用户信息
	每次Git提交时都会引用这用户名字和邮件地址信息，如果去掉--global则新设定只保存在.git/config文件中
	$ git config --global user.name "John Doe"
	$ git config --global user.email johndoe@example.com
* 文本编辑器
	$ git config --global core.editor emacs
* 差异分析工具
	在解决合并冲突时，会使用差异分析工具，vimdiff是比较常用的
	$ git config --global merge.tool vimdiff
* 查看配置信息
	$ git config --list


== 4.2 Git基础 ==

== 4.2.1 取得项目Git仓库 ==
* 初始化仓库
	$ git init，用于在当前工作目录下初始化git仓库
	$ git add *.c，用于将*.c文件添加到git管理的仓库中
	$ git commit，用于提交更改
* 从现有仓库中克隆
	$ git clone git://github.com/schacon/grit.git


== 4.2.2 记录每次更行到仓库 ==
* 检查当前文件状态
	$ git status
* 跟踪新文件
	$ git add README

• 忽略某些文件
	在工作目录中有.gitignore文件，编辑该文件可以实现git忽略跟踪某些文件。要养成一开始就设置好 .gitignore 文件的习惯，以免将来误提交这类无用的文件。
	文件 .gitignore 的格式规范如下：
	所有空行或者以注释符号 ＃ 开头的行都会被 Git 忽略。
	可以使用标准的 glob 模式匹配。 * 匹配模式最后跟反斜杠（/）说明要忽略的是目录。 * 要忽略指定模式以外的文件或目录，可以在模式前加上惊叹号（!）取反。
	所谓的 glob 模式是指 shell 所使用的简化了的正则表达式。星号（*）匹配零个或多个任意字符；[abc] 匹配任何一个列在方括号中的字符（这个例子要么匹配一个 a，要么匹配一个 b，要么匹配一个 c）；问号（?）只匹配一个任意字符；如果在方括号中使用短划线分隔两个字符，表示所有在这两个字符范围内的都可以匹配（比如 [0-9] 表示匹配所有 0 到 9 的数字）。
	例子：
	# 此为注释 – 将被 Git 忽略
	*.a       # 忽略所有 .a 结尾的文件
	!lib.a    # 但 lib.a 除外
	/TODO     # 仅仅忽略项目根目录下的 TODO 文件，不包括 subdir/TODO
	build/    # 忽略 build/ 目录下的所有文件
	doc/*.txt # 会忽略 doc/notes.txt 但不包括 doc/server/arch.txt
* 查看已暂存和未暂存的更新
	要查看尚未暂存的文件更新了哪些部分，此命令比较的是工作目录中当前文件和暂存区域快照之间的差异，也就是修改之后还没有暂存起来的变化内容
	$ git diff
	若要看已经暂存起来的文件和上次提交时的快照之间的差异，可以用 git diff --cached 命令。
* 提交更新
	$ git commit
	$ git commit -m "Story 182: Fix benchmarks for speed"
* 跳过使用暂存区域
	尽管使用暂存区域的方式可以精心准备要提交的细节，但有时候这么做略显繁琐。Git 提供了一个跳过使用暂存区域的方式，只要在提交的时候，给 git commit 加上 -a 选项，Git 就会自动把所有已经跟踪过的文件暂存起来一并提交，从而跳过 git add 步骤
* 移除文件
	见git rm的帮助文件
* 移动文件
	见git mv的帮助文件


== 4.2.3 查看提交历史 ==


== 4.2.4 撤销操作 ==

== 4.2.5 ==
   
