Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2011-09-22T14:16:12+08:00

====== Linux Kernel ======
Created 星期四 22 九月 2011

===== patch kernel =====


===== compile kernel =====
* 首先make mrproper: Clean out all previous configurations and reset the source directory to a pristine state. The main reason for doing this is that some files do not automatically get rebuilt, which can lead to failed builds, or at worst, a buggy kernel.
* 从/proc/config.gz可以获得当前kernel的配置文件.config，具体操作为zcat [[/proc/config.gz]] > [[~/kernel/.config]]
* 为了以防万一，可以执行make clean，删除掉已有的.o文件
* 此时可以选择执行make localmodconfig，它的作用是检查当前系统中已经加载的module，然后根据依赖关系选择必须的modules而去掉不需要的modules选项，这样能够减少.config选项，缩短编译时间，节约存储空间。但需要注意的是，例如u盘，在没有插入u盘时，lsmod中是看不到与其相关的modules的，意味着执行make localmodconfig后，.config中不支持u盘，所以可以选择：1.在make localmodconfig前插入u盘，以让lsmod中显示u盘相关modules，并将其纳入.config中（如果lsmod中没有你需要的模块，也可以利用modprobe添加）；2.在make localmodconfig后手动选取u盘依赖的modules。
* 万事具备，只欠make。对于多核系统，可以加入-j[# of processors + 1]参数，例如双核cpu则加入-j3，这样能提高编译速度。这里的make等价于make vmlinux && make modules && make bzImage。
* 然后是make modules_install，将modules安装（复制）到/lib/modules/目录下。
* 如果要生成raminitfs，执行mkinitcpio -k xxx -g /boot/yyy.img，其中xxx对应为make modules_install步骤中/lib/modules目录下生成的子目录名，yyy则可根据自己喜好将raminitfs命名并安装到/boot/目录下。
* 将压缩成为bzImage的vmlinux复制到/boot/目录下，bzImage的地址在/arch/x86/boot/目录下。
* System.map我就懒的安装了，详见［科普］中的内容。
* 最后一步，修改/boot/grub/menu.lst，至此大功告成，借助localmodconfig神力，编译过程即短，占用的存储空间又少，oh yeah!重新启动系统吧骚年！
* ［科普］vmlinux和bzImage：On Linux systems, vmlinux is a statically linked, executable file that contains the Linux kernel in one of the object file formats supported by Linux, including ELF, COFF and a.out. The vmlinux file might be required for kernel debugging, symbol table generation or other operations, but must be made bootable before being used as an operating system kernel by adding a multiboot header, bootsector and setup routines.          As the Linux kernel matured, the size of the kernels generated by users grew beyond the limits imposed by some architectures, where the space available to store the compressed kernel code is limited. The bzImage (big zImage) format was developed to overcome this limitation by cleverly splitting the kernel over discontiguous memory regions.The bzImage file is in a specific format: It contains concatenated bootsect.o + setup.o + misc.o + piggy.o.
* ［科普］System.map
* ［科普］ramdisk
